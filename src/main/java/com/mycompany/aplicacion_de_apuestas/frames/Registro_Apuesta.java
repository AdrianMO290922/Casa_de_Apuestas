/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.aplicacion_de_apuestas.frames;

import com.google.gson.Gson;
import com.itextpdf.io.font.constants.StandardFonts;
import com.itextpdf.kernel.font.PdfFontFactory;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Paragraph;
import com.mycompany.aplicacion_de_apuestas.Carrera;
import com.mycompany.aplicacion_de_apuestas.Corredor;
import com.mycompany.aplicacion_de_apuestas.Usuario;
import com.mycompany.aplicacion_de_apuestas.frames.DBManager.DBManger;
import java.awt.Desktop;
import java.awt.GridLayout;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.json.simple.JSONArray;
import org.json.simple.parser.JSONParser;

/**
 *
 * @author adria
 */
public class Registro_Apuesta extends javax.swing.JFrame {

    ArrayList<Corredor> listRuns = new ArrayList<>();
    ArrayList<Corredor> listRuns2 = new ArrayList<>();
    private GridLayout grid = new GridLayout(1, 1);
    ArrayList<Carrera> listCarr = new ArrayList<>();
    ArrayList<Usuario> listUsers = new ArrayList<>();
    Carrera carreraP;
    Usuario usuario;
    Corredor run;
    int IDC;
    DBManger DB = new DBManger();

    public Registro_Apuesta() {
        initComponents();
        jPanel2.setLayout(grid);
        setLocationRelativeTo(null);
    }

    public Registro_Apuesta(Usuario usuario, int IDC) {
        initComponents();
        jPanel2.setLayout(grid);
        setLocationRelativeTo(null);
        this.usuario = usuario;
        this.IDC = IDC;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        btnDcsv = new javax.swing.JButton();
        btnDpdf = new javax.swing.JButton();
        txtMonto = new javax.swing.JTextField();
        btnApuesta = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        labelHeader1 = new org.edisoncor.gui.label.LabelHeader();
        btnCancel = new javax.swing.JButton();
        panelImage1 = new org.edisoncor.gui.panel.PanelImage();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Corredor" }));
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("Corrdeores:");

        btnDcsv.setBackground(new java.awt.Color(196, 12, 6));
        btnDcsv.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnDcsv.setForeground(new java.awt.Color(255, 255, 255));
        btnDcsv.setText("Descargar Ficha Tecnica .csv");
        btnDcsv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDcsvActionPerformed(evt);
            }
        });

        btnDpdf.setBackground(new java.awt.Color(196, 12, 6));
        btnDpdf.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnDpdf.setForeground(new java.awt.Color(255, 255, 255));
        btnDpdf.setText("Descargar Ficha Tecnica .pdf");
        btnDpdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDpdfActionPerformed(evt);
            }
        });

        btnApuesta.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnApuesta.setText("Apostar");
        btnApuesta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApuestaActionPerformed(evt);
            }
        });

        jLabel2.setText("$");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("Monto a apostar");

        jPanel2.setBorder(new javax.swing.border.MatteBorder(null));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 277, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 277, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(jPanel2);

        labelHeader1.setBackground(new java.awt.Color(196, 12, 6));
        labelHeader1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        labelHeader1.setText("Ficha Tecnica");
        labelHeader1.setColor(new java.awt.Color(196, 12, 6));
        labelHeader1.setColorDeSombra(new java.awt.Color(196, 12, 6));

        btnCancel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnCancel.setText("Cancelar");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        panelImage1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, new java.awt.Color(255, 0, 0), new java.awt.Color(255, 0, 0)));
        panelImage1.setIcon(new javax.swing.ImageIcon("C:\\Users\\adria\\Documents\\Archivos del Proyecto JSON\\Logo.png")); // NOI18N

        javax.swing.GroupLayout panelImage1Layout = new javax.swing.GroupLayout(panelImage1);
        panelImage1.setLayout(panelImage1Layout);
        panelImage1Layout.setHorizontalGroup(
            panelImage1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 303, Short.MAX_VALUE)
        );
        panelImage1Layout.setVerticalGroup(
            panelImage1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 145, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labelHeader1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(panelImage1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnApuesta, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtMonto, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnCancel)))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnDcsv, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnDpdf)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(40, 40, 40)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(53, 53, 53))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(btnDcsv)
                        .addGap(18, 18, 18)
                        .addComponent(btnDpdf))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panelImage1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jLabel3)
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMonto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(27, 27, 27)
                        .addComponent(btnApuesta)
                        .addGap(18, 18, 18)
                        .addComponent(btnCancel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                        .addComponent(labelHeader1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28))))
        );

        labelHeader1.getAccessibleContext().setAccessibleName("Corredor");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {
            String json = new Gson().toJson(listRuns2);

            BufferedWriter bw = new BufferedWriter(new FileWriter("C:/Users/adria/Documents/Archivos del Proyecto JSON/Corredores.json", false));
            bw.write(json);
            bw.close();
            System.out.println("Se guardaron los Runs correctamente");
        } catch (Exception e) {
            e.printStackTrace();
        }
        ///////////////////////////Carreras/////////////////////////////////////
        try {
            String json = new Gson().toJson(listCarr);

            BufferedWriter bw = new BufferedWriter(new FileWriter("C:/Users/adria/Documents/Archivos del Proyecto JSON/Carreras.json", false));
            bw.write(json);
            bw.close();
            System.out.println("Se guardaron las carreras correctamente");
        } catch (Exception e) {
            e.printStackTrace();
        }
        ///////////////////////////Personas///////////////////////////////////////////////////////
        try {
            String json = new Gson().toJson(listUsers);

            BufferedWriter bw = new BufferedWriter(new FileWriter("C:/Users/adria/Documents/Archivos del Proyecto JSON/Usuarios.json", false));
            bw.write(json);
            bw.close();
            System.out.println("Se  guardaron los Usuarios correctamente");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_formWindowClosing

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        jComboBox1.removeAllItems();
        try {
           /* BufferedReader br = new BufferedReader(new FileReader("C:/Users/adria/Documents/Archivos del Proyecto JSON/Corredores.json"));
            String lectura = null;
            String resultado = "";
            while ((lectura = br.readLine()) != null) {
                resultado += lectura;
            }
            br.close();

            JSONParser parser = new JSONParser();
            JSONArray jsonArray = (JSONArray) parser.parse(resultado);
            */
            listRuns2.clear();
            listRuns2 = DB.rellenaCorredor();
            /*for (int i = 0; i < jsonArray.size(); i++) {
                Corredor corredor = new Gson().fromJson(jsonArray.get(i).toString(), Corredor.class);
                listRuns2.add(corredor);

            }
            */
            System.out.println("Se cargaron los Runscorrectamente");
            //actualizaCorredores();
        } catch (Exception e) {
            e.printStackTrace();
        }
        /*for (Corredor corredor : listRuns) {
            jComboBox1.addItem(corredor.getNombre() + " " + corredor.getApellido());
        }*/
        /////Carreras/////////////////////////////////////////////////////////////////////////////////////
        try {
            /*BufferedReader br = new BufferedReader(new FileReader("C:/Users/adria/Documents/Archivos del Proyecto JSON/Carreras.json"));
            String lectura = null;
            String resultado = "";
            while ((lectura = br.readLine()) != null) {
                resultado += lectura;
            }
            br.close();

            JSONParser parser = new JSONParser();
            JSONArray jsonArray = (JSONArray) parser.parse(resultado);
*/
            listCarr.clear();
            listCarr = DB.rellenarC(1);
            /*for (int i = 0; i < jsonArray.size(); i++) {
                Carrera carrera = new Gson().fromJson(jsonArray.get(i).toString(), Carrera.class);
                listCarr.add(carrera);

            }*/
            System.out.println("Se cargaron las Carreras correctamente");
            for (Carrera carrera : listCarr) {
                if (carrera.getId() == IDC) {
                    carreraP = carrera;
                    carreraP.setListRuns(DB.runForCar(carreraP.getId()));
                }
            }
            listRuns = carreraP.getListRuns();
            for (Corredor corredor : listRuns) {
                jComboBox1.addItem(corredor.getNombre() + " " + corredor.getApellido());
            }

            //actualizaCorredores();
        } catch (Exception e) {
            e.printStackTrace();
        }
        ////////////////////////////////////Usuario//////////////////////////////////////////////////
        try {
            /*BufferedReader br = new BufferedReader(new FileReader("C:/Users/adria/Documents/Archivos del Proyecto JSON/Usuarios.json"));
            String lectura = null;
            String resultado = "";
            while ((lectura = br.readLine()) != null) {
                resultado += lectura;
            }
            br.close();

            JSONParser parser = new JSONParser();
            JSONArray jsonArray = (JSONArray) parser.parse(resultado);

            listUsers.clear();
            for (int i = 0; i < jsonArray.size(); i++) {
                Usuario user = new Gson().fromJson(jsonArray.get(i).toString(), Usuario.class);
                //if(((Usuario)persona).getQuienSoy() == 1 ||((Usuario)persona).getQuienSoy() == 2 ){
                //if(persona instanceof Usuario){
                /*if(user.getQuienSoy() ==)
                    Usuario U = (Usuario)persona;
                listUsers.add(U);
                }*/
            /*
                listUsers.add(user);

            }
            */
            listUsers.clear();
            listUsers = DB.rellenarU();
            System.out.println("Se cargaron los Usuarios correctamente");
            //actualizaCategorias();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_formWindowOpened

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed

    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        for (Corredor corredor : listRuns) {
            if (jComboBox1.getSelectedItem().toString().equals(corredor.getNombre() + " " + corredor.getApellido())) {
                run = corredor;
                actualizaPanel(corredor);
            }
        }
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void btnApuestaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApuestaActionPerformed
        //jComboBox1.getSelectedItem();
        // Corredor coA = (Corredor) jComboBox1.getSelectedItem();
        //coA.setaFavor(1 + coA.getaFavor());

        for (Carrera carrera : listCarr) {
            if (carrera.getId() == IDC) {
                try {
                    //carrera.setListRuns(listRuns);
                    carrera.setListRuns(DB.runForCar(carrera.getId()));
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                for (Corredor corredor : carrera.getListRuns()) {
                    if ((corredor.getNombre() + " " + corredor.getApellido()).equals(jComboBox1.getSelectedItem().toString())) {
                        corredor.setaFavor(1 + corredor.getaFavor());
                        try {
                            DB.sumAfavor(corredor.getaFavor(),corredor.getId());
                        
                        carrera.setGanancia((Double.parseDouble(txtMonto.getText()) * 0.10) + carrera.getGanancia());
                        carrera.setMontoApostado((Double.parseDouble(txtMonto.getText())) + carrera.getMontoApostado());
                        carrera.getListUsers().add(usuario);
                        DB.GanMon(carrera.getGanancia(),carrera.getMontoApostado(),carrera.getId());
                        DB.addUaCarr(carrera.getId(), usuario.getId(), corredor.getId());
                        //usuario.setIdApuesta((carrera.getListRuns().indexOf(corredor)) + 1);//BASE DE DATOS
                        System.out.println("El id que se le tuvo que obtener es el siguiente: " + ((carrera.getListRuns().indexOf(corredor)) + 1));
                        } catch (Exception ex) {
                            ex.printStackTrace();
                        }
                    }
                }

            }
        }
        /*  for(Usuario user:listUsers){
            if(user.getCuenta().equals(usuario.getCuenta())){
                System.out.println("Se supone que aqui se Actualiza");
                System.out.println("UF "+usuario.getIdApuesta());
                System.out.println("UV: "+user.getIdApuesta());
                user = usuario;
                System.out.println("UF "+usuario.getIdApuesta());
                System.out.println("UV: "+user.getIdApuesta());
            }
        }*/
        guardarData();
        new UserSitio(usuario).setVisible(true);
        dispose();
    }//GEN-LAST:event_btnApuestaActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        guardarData();
        new UserSitio(usuario).setVisible(true);
        dispose();

    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnDpdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDpdfActionPerformed
        try {
            ///Descaraga de Pdf
            PdfDocument pdf = new PdfDocument(new PdfWriter(new File("C:/Users/adria/Documents/Archivos del Proyecto JSON/Ficha" + run.getNombre() + ".pdf")));
            Document doc = new Document(pdf);
            //Corredor run  = (Corredor)jComboBox1.getSelectedItem()
            Paragraph parrafo = new Paragraph("------------------------------------------------------ Ficha Tecnica ------------------------------------------------------");
            parrafo.setBold();
            //parrafo.setFontSize(TOP_ALIGNMENT);
            doc.add(parrafo);
            doc.add(new Paragraph("Nombre: " + run.getNombre()));
            doc.add(new Paragraph("Apellido: " + run.getApellido()));
            doc.add(new Paragraph("Edad: " + (2024 - run.getBornDay())));
            doc.add(new Paragraph("Altura: " + run.getAltura()));
            doc.add(new Paragraph("Peso: " + run.getPeso()));
            doc.add(new Paragraph("Carreras Ganadas: " + run.getCarrerasG()));
            parrafo = new Paragraph("--------------------------------------------------------------------------------------------------------------------------------");
            parrafo.setBold();
            doc.add(parrafo);
            doc.close();
            pdf.close();

            JOptionPane.showMessageDialog(null, "Ficha dscargada en PDF en la carpeta del Proyecto");
            File path = new File("C:/Users/adria/Documents/Archivos del Proyecto JSON/Ficha" + run.getNombre() + ".pdf");
            Desktop.getDesktop().open(path);

 
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            Logger.getLogger(Registro_Apuesta.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnDpdfActionPerformed

    private void btnDcsvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDcsvActionPerformed
        // Descarga en csv
        
        try {
            File csv = new File("C:/Users/adria/Documents/Archivos del Proyecto JSON/Ficha" + run.getNombre() + ".csv");
            FileWriter excel = new FileWriter(csv);
            
            for(int i = 0; i < 7;i++){
                
                switch (i) {
                    case 0: 
                        excel.append("FICHA TECNICA,\n");
                        break;
                    case 1:
                        excel.append("Nombre:,"+run.getNombre()+"\n");
                        break;
                    case 2:
                        excel.append("Apellido:,"+run.getApellido()+"\n");
                        break;
                    case 3:
                        excel.append("Edad:,"+(2024-run.getBornDay())+"\n");
                        break;
                    case 4:
                        excel.append("Altura:,"+run.getAltura()+"\n");
                        break;
                    case 5:
                        excel.append("Peso:,"+run.getPeso()+"\n");
                        break;
                    case 6:
                        excel.append("Carreras Ganadas:,"+run.getCarrerasG()+"\n");
                        break;
                    default:
                        System.out.println("Hubo un porblema con los case");
                }
            }
            excel.close();
             JOptionPane.showMessageDialog(null, "Ficha dscargada en CSV en la carpeta del Proyecto");
             File path = new File("C:/Users/adria/Documents/Archivos del Proyecto JSON/Ficha" + run.getNombre() + ".csv");
            Desktop.getDesktop().open(path);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnDcsvActionPerformed
    public void guardarData() {
        try {
            String json = new Gson().toJson(listRuns2);

            BufferedWriter bw = new BufferedWriter(new FileWriter("C:/Users/adria/Documents/Archivos del Proyecto JSON/Corredores.json", false));
            bw.write(json);
            bw.close();
            System.out.println("Se guardaron los Runs correctamente");
        } catch (Exception e) {
            e.printStackTrace();
        }

        ///////////////////////////Carreras/////////////////////////////////////
        try {
            String json = new Gson().toJson(listCarr);

            BufferedWriter bw = new BufferedWriter(new FileWriter("C:/Users/adria/Documents/Archivos del Proyecto JSON/Carreras.json", false));
            bw.write(json);
            bw.close();
            System.out.println("Se guardaron las carreras correctamente");
        } catch (Exception e) {
            e.printStackTrace();
        }
        ///////////////////////////Personas///////////////////////////////////////////////////////
        try {
            String json = new Gson().toJson(listUsers);

            BufferedWriter bw = new BufferedWriter(new FileWriter("C:/Users/adria/Documents/Archivos del Proyecto JSON/Usuarios.json", false));
            bw.write(json);
            bw.close();
            System.out.println("Se  guardaron los Usuarios correctamente");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void actualizaPanel(Corredor corredor) {
        jPanel2.removeAll();
        grid.setRows(1);
        //for (Corredor corredor : listRuns) {
        //PanelCategoria panelCat = new PanelCategoria(cat, listCategoria); 
        PanelEstadisticasC panelCo = new PanelEstadisticasC(corredor);
        jPanel2.add(panelCo);
        //jPanel1.add(panelCat);
        //}
        jPanel2.updateUI();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Registro_Apuesta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Registro_Apuesta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Registro_Apuesta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Registro_Apuesta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Registro_Apuesta().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApuesta;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDcsv;
    private javax.swing.JButton btnDpdf;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private org.edisoncor.gui.label.LabelHeader labelHeader1;
    private org.edisoncor.gui.panel.PanelImage panelImage1;
    private javax.swing.JTextField txtMonto;
    // End of variables declaration//GEN-END:variables
}
